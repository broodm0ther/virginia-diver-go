package routes

import (
	"encoding/json"
	"kostya/database"
	"kostya/models"
	"log"
	"os"
	"path/filepath"
	"strconv"

	"github.com/gofiber/fiber/v2"
)

func AddProduct(c *fiber.Ctx) error {
	log.Println("üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

	form, err := c.MultipartForm()
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã:", err)
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ä–º—ã"})
	}

	title := form.Value["title"]
	description := form.Value["description"]
	priceStr := form.Value["price"]
	location := form.Value["location"]
	category := form.Value["category"]
	gender := form.Value["gender"]
	size := form.Value["size"]

	log.Println("üîé –î–∞–Ω–Ω—ã–µ:", title, description, priceStr, location, category, gender, size)

	if len(title) == 0 || len(description) == 0 || len(priceStr) == 0 ||
		len(location) == 0 || len(category) == 0 || len(gender) == 0 || len(size) == 0 {
		return c.Status(400).JSON(fiber.Map{"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
	}

	price, err := strconv.ParseFloat(priceStr[0], 64)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã:", err)
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞"})
	}

	files := form.File["images"]
	if len(files) == 0 {
		return c.Status(400).JSON(fiber.Map{"error": "–ú–∏–Ω–∏–º—É–º 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"})
	}

	if len(files) > 10 {
		return c.Status(400).JSON(fiber.Map{"error": "–ú–∞–∫—Å–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"})
	}

	imagePaths := []string{}
	err = os.MkdirAll("./uploads/products", os.ModePerm)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads/products:", err)
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"})
	}

	for _, file := range files {
		path := filepath.Join("uploads/products", file.Filename)
		err := c.SaveFile(file, path)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", err)
			return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"})
		}
		imagePaths = append(imagePaths, "/"+path)
	}

	user, ok := c.Locals("user").(models.User)
	if !ok {
		log.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
		return c.Status(401).JSON(fiber.Map{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}

	jsonImages, err := json.Marshal(imagePaths)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", err)
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"})
	}

	product := models.Product{
		Title:       title[0],
		Description: description[0],
		Price:       price,
		Location:    location[0],
		Category:    category[0],
		Gender:      gender[0],
		Size:        size[0],
		Images:      string(jsonImages),
		Status:      "pending",
		UserID:      user.ID,
	}

	if err := database.DB.Create(&product).Error; err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î:", err)
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", "details": err.Error()})
	}

	log.Println("‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —Å ID:", product.ID)
	return c.JSON(fiber.Map{"message": "–¢–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "product_id": product.ID})
}
