package routes

import (
	"fmt"
	"os"
	"path/filepath"

	"kostya/database"
	"kostya/models"

	"github.com/gofiber/fiber/v2"
)

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ —É —Ç–µ–±—è)
func UpdateProfile(c *fiber.Ctx) error {
	fmt.Println("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")

	form, err := c.MultipartForm()
	if err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º—ã"})
	}

	username := form.Value["username"][0]
	region := form.Value["region"][0]
	bio := form.Value["bio"][0]

	var avatarPath string
	files := form.File["avatar"]
	if len(files) > 0 {
		file := files[0]
		fmt.Println("üì∏ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω:", file.Filename)

		os.MkdirAll("./uploads", os.ModePerm)
		avatarPath = "/uploads/" + file.Filename
		filePath := filepath.Join("./uploads", file.Filename)

		err = c.SaveFile(file, filePath)
		if err != nil {
			return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"})
		}
		fmt.Println("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", filePath)
	}

	// üî• –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	userID := c.Locals("user_id").(int)
	query := "UPDATE users SET username=?, region=?, bio=?, avatar=? WHERE id=?"
	err = database.DB.Exec(query, username, region, bio, avatarPath, userID).Error
	if err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"})
	}

	fmt.Println("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î")
	return c.JSON(fiber.Map{"message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω", "avatar": avatarPath})
}

// ‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
func SetUserRole(c *fiber.Ctx) error {
	adminID := c.Locals("user_id").(int)

	var adminUser models.User
	if err := database.DB.First(&adminUser, adminID).Error; err != nil || adminUser.Role != "admin" {
		return c.Status(403).JSON(fiber.Map{"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"})
	}

	type RequestBody struct {
		UserID int    `json:"user_id"`
		Role   string `json:"role"`
	}
	var body RequestBody
	if err := c.BodyParser(&body); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π JSON"})
	}

	if err := database.DB.Model(&models.User{}).Where("id = ?", body.UserID).Update("role", body.Role).Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏"})
	}

	return c.JSON(fiber.Map{"message": "–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"})
}

// ‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
func GetAllUsers(c *fiber.Ctx) error {
	userIDInterface := c.Locals("user_id")
	if userIDInterface == nil {
		return c.Status(401).JSON(fiber.Map{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}
	userID, ok := userIDInterface.(int)
	if !ok {
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
	}

	var adminUser models.User
	if err := database.DB.First(&adminUser, userID).Error; err != nil || adminUser.Role != "admin" {
		return c.Status(403).JSON(fiber.Map{"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"})
	}

	var users []models.User
	if err := database.DB.Find(&users).Error; err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"})
	}

	var cleanUsers []map[string]interface{}
	for _, u := range users {
		cleanUsers = append(cleanUsers, map[string]interface{}{
			"id":       u.ID,
			"username": u.Username,
			"email":    u.Email,
			"role":     u.Role,
		})
	}

	return c.JSON(fiber.Map{"users": cleanUsers})
}
