package routes

import (
	"fmt"
	"log"
	"math/rand"
	"net/smtp"
	"os"
	"strings"
	"time"

	"kostya/database"
	"kostya/models"

	"github.com/gofiber/fiber/v2"
	"github.com/golang-jwt/jwt/v5"
	"golang.org/x/crypto/bcrypt"
)

func generateCode() string {
	return fmt.Sprintf("%06d", rand.Intn(1000000))
}

// ‚úÖ –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è HTML-–ø–∏—Å—å–º–∞
func buildHTMLMessage(title, code string) string {
	return fmt.Sprintf(`
		<!DOCTYPE html>
		<html lang="ru">
		<head>
			<meta charset="UTF-8">
			<title>%s</title>
			<style>
				body {
					background-color: #f2f2f2;
					font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
					margin: 0;
					padding: 0;
					color: #111;
				}
				.wrapper {
					max-width: 480px;
					margin: 30px auto;
					background-color: #ffffff;
					border-radius: 12px;
					box-shadow: 0 5px 15px rgba(0,0,0,0.07);
					padding: 30px;
				}
				.logo {
					font-family: 'Courier New', Courier, monospace;
					font-size: 22px;
					letter-spacing: 1px;
					text-align: center;
					margin-bottom: 25px;
					color: #000;
				}
				.title {
					font-size: 20px;
					font-weight: bold;
					text-align: center;
					margin-bottom: 20px;
				}
				.code {
					font-size: 28px;
					font-weight: bold;
					color: #000;
					background-color: #f7f7f7;
					border-radius: 8px;
					padding: 12px 20px;
					text-align: center;
					letter-spacing: 4px;
					margin: 0 auto 25px;
					width: fit-content;
				}
				.footer {
					margin-top: 30px;
					font-size: 12px;
					color: #999;
					text-align: center;
				}
			</style>
		</head>
		<body>
			<div class="wrapper">
				<div class="logo">amazonica project</div>
				<div class="title">%s</div>
				<div class="code">%s</div>
				<p style="text-align:center;">–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</p>
				<div class="footer">
					–í—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤–∞—à email<br/>
					–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.
				</div>
			</div>
		</body>
		</html>
	`, title, title, code)
}

// ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ HTML-–ø–∏—Å—å–º–∞
func sendEmail(to string, subject string, code string) error {
	from := os.Getenv("EMAIL_USER")
	password := os.Getenv("EMAIL_PASS")

	htmlBody := buildHTMLMessage(subject, code)

	msg := "MIME-Version: 1.0\r\n" +
		"Content-Type: text/html; charset=\"UTF-8\"\r\n" +
		"From: " + from + "\r\n" +
		"To: " + to + "\r\n" +
		"Subject: " + subject + "\r\n\r\n" +
		htmlBody

	err := smtp.SendMail(
		"smtp.gmail.com:587",
		smtp.PlainAuth("", from, password, "smtp.gmail.com"),
		from,
		[]string{to},
		[]byte(msg),
	)

	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err)
	} else {
		log.Println("üì® –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞:", to)
	}
	return err
}

// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –ø–∏—Å—å–º–æ–º
func RegisterUser(c *fiber.Ctx) error {
	var newUser models.User
	if err := c.BodyParser(&newUser); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
	}

	var existing models.User
	if err := database.DB.Where("email = ?", newUser.Email).First(&existing).Error; err == nil {
		return c.Status(fiber.StatusConflict).JSON(fiber.Map{"error": "Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"})
	}

	newUser.Password = strings.TrimSpace(newUser.Password)
	if newUser.Password == "" {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"})
	}

	hashed, err := bcrypt.GenerateFromPassword([]byte(newUser.Password), bcrypt.DefaultCost)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è"})
	}
	newUser.Password = string(hashed)

	code := generateCode()
	newUser.VerifyCode = code
	newUser.IsVerified = false

	sendEmail(newUser.Email, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã", code)

	if err := database.DB.Create(&newUser).Error; err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"})
	}

	return c.JSON(fiber.Map{"message": "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É"})
}

// üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
func VerifyEmail(c *fiber.Ctx) error {
	var req struct {
		Email string `json:"email"`
		Code  string `json:"code"`
	}
	if err := c.BodyParser(&req); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"})
	}

	var user models.User
	database.DB.Where("email = ?", req.Email).First(&user)

	if user.VerifyCode != req.Code {
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"})
	}

	user.IsVerified = true
	user.VerifyCode = ""
	database.DB.Save(&user)
	return c.JSON(fiber.Map{"message": "–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"})
}

// üîë –õ–æ–≥–∏–Ω
func LoginUser(c *fiber.Ctx) error {
	var login struct {
		Email    string `json:"email"`
		Password string `json:"password"`
	}
	if err := c.BodyParser(&login); err != nil {
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"})
	}

	login.Password = strings.TrimSpace(login.Password)

	var user models.User
	result := database.DB.Where("email = ?", login.Email).First(&user)
	if result.Error != nil {
		return c.Status(404).JSON(fiber.Map{"error": "–ü–æ—á—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(login.Password)); err != nil {
		return c.Status(401).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"})
	}

	if !user.IsVerified {
		return c.Status(403).JSON(fiber.Map{"error": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—á—Ç—É"})
	}

	token, err := GenerateToken(user.ID)
	if err != nil {
		return c.Status(500).JSON(fiber.Map{"error": "–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞"})
	}

	return c.JSON(fiber.Map{
		"token": token,
		"user": fiber.Map{
			"id":       user.ID,
			"username": user.Username,
			"email":    user.Email,
		},
	})
}

// üîÅ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞)
func ForgotPassword(c *fiber.Ctx) error {
	var req struct {
		Email string `json:"email"`
	}
	_ = c.BodyParser(&req)

	var user models.User
	if err := database.DB.Where("email = ?", req.Email).First(&user).Error; err != nil {
		return c.Status(404).JSON(fiber.Map{"error": "Email –Ω–µ –Ω–∞–π–¥–µ–Ω"})
	}

	code := generateCode()
	user.ResetCode = code
	database.DB.Save(&user)

	sendEmail(user.Email, "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è", code)
	return c.JSON(fiber.Map{"message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É"})
}

// üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ –∫–æ–¥—É
func ResetPassword(c *fiber.Ctx) error {
	var req struct {
		Email       string `json:"email"`
		Code        string `json:"code"`
		NewPassword string `json:"newPassword"`
	}
	_ = c.BodyParser(&req)

	var user models.User
	database.DB.Where("email = ?", req.Email).First(&user)

	if user.ResetCode != req.Code {
		return c.Status(400).JSON(fiber.Map{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"})
	}

	hashed, _ := bcrypt.GenerateFromPassword([]byte(req.NewPassword), bcrypt.DefaultCost)
	user.Password = string(hashed)
	user.ResetCode = ""
	database.DB.Save(&user)

	return c.JSON(fiber.Map{"message": "–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"})
}

// üîê –ü—Ä–æ—Ñ–∏–ª—å
func GetProfile(c *fiber.Ctx) error {
	user := c.Locals("user").(models.User)
	return c.JSON(fiber.Map{
		"username": user.Username,
		"email":    user.Email,
		"avatar":   user.Avatar,
		"role":     user.Role,
	})
}

// üîê –í—ã—Ö–æ–¥
func LogoutUser(c *fiber.Ctx) error {
	return c.Status(200).JSON(fiber.Map{"message": "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏!"})
}

// üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
func GenerateToken(userID uint) (string, error) {
	claims := jwt.MapClaims{
		"user_id": userID,
		"exp":     time.Now().Add(time.Hour * 24).Unix(),
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString(secretKey)
}
